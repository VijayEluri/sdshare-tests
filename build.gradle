/*
 * Gradle 0.9 build file.
 * 
 * - Download Gradle from <http://www.gradle.org/>
 * - Execute gradle build
 * 
 * TODO: Zip / Tar archives
 *
 */
group = 'org.sdshare'
version = '0.3.0'
bundleVersion = version

projectName = 'SDShare Server Tests'
projectDescription = projectName // TODO
projectURL = 'http://github.com/heuer/sdshare-tests'

vendorName = 'SDShare.org'
vendorURL = 'http://www.sdshare.org/'
licenseName = 'Apache Software License, Version 2.0'
licenseURL = 'http://www.apache.org/licenses/LICENSE-2.0.txt'

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

defaultTasks 'clean', 'build'

eclipse.classpath.downloadSources = false

gradle.taskGraph.whenReady {taskGraph ->
   if (!taskGraph.hasTask(':release')) {
       version += '-SNAPSHOT'
   }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'junit:junit:4.8.1', 
            'xom:xom:1.2.5', 
            'org.slf4j:slf4j-api:(1.5.8,)',
            'thaiopensource:jing:20030619'
    testRuntime 'org.slf4j:slf4j-jdk14:(1.5.8,)'
}

jar {
      manifest {
        name = projectName
        
        attributes 'Implementation-Version': project.version, 
                    'Implementation-Vendor': project.vendorName, 
                    'Implementation-URL': project.projectURL, 
                    'Sealed': 'false',
                    'Main-Class': 'org.isotopicmaps.sdsharetests.server.RunServerTests',
                    'Class-Path': configurations.runtime.plus(configurations.testRuntime).collect({ 'lib/' + it.name}).join(' ')
      }
}

task myJar(type: Jar)

artifacts {
    archives myJar
}

task dist(dependsOn: [assemble, test]) << {
    def base_name = "$archivesBaseName-${project.version}"
    def base = "$distsDir/" + base_name
    def zips = "$buildDir/dist/$base_name"
    def doc_dir = "$buildDir/docs"
    copy {
        into base
        from(doc_dir)
        from(libsDir)
        from(projectDir) {
            include 'README'
            include 'LICENSE.txt'
            include 'CHANGES.txt'
            include 'NOTICE.txt'
        }
        from("$projectDir/src") {
            into 'src'
            exclude '**/*.bak'
        }
        into('lib') {
            from configurations.runtime
            from configurations.testRuntime
        }
    }
    ant {
        tar destfile: zips + '.tar.gz', basedir: distsDir, compression: 'gzip', longfile: 'gnu'
        zip destfile: zips + '.zip', basedir: distsDir
    }
}

uploadArchives {
    repositories.mavenDeployer {
        repository(url: "file://$buildDir/maven-repo/")

        pom.project {
            name project.projectName
            description project.projectDescription
            url project.projectURL
            
            organization {
                name project.vendorName
                url project.vendorURL
            }
            licenses {
               license {
                  name project.licenseName
                  url project.licenseURL
               }
            }
        }
    }
}

